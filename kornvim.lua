-- kornvim.lua
-- Script to initialize a new Neovim configuration.

-- Get the configuration path from command-line arguments.
local config_path = arg[1]
local init_plugin = arg[2] or "korsmakolnikov/kornvim_configurator"
local dbg_flag = os.getenv("KORNVIM_DBG_FLAG") or false

-- If no path is provided, show an error message.
if not config_path then
  print("Error: Configuration path was not specified.")
  print("Usage: lua kornvim.lua /path/to/your/config")
  os.exit(1)
end

-- Ensure the path ends with a directory separator.
config_path = config_path:gsub("/$", "") .. "/"

-- Function to create a directory if it doesn't exist.
local function create_dir(path)
  local file = io.open(path, "r")
  if not file then
    os.execute("mkdir -p " .. path)
  else
    file:close()
  end
end

-- Create the main configuration directory.
create_dir(config_path)

-- Create the lua subdirectory.
local lua_path = config_path .. "lua/"
create_dir(lua_path)

-- Content for the init.lua file.
local init_content = [[
-- init.lua
-- Neovim configuration file generated by kornvim.lua

-- Get the current working directory using a built-in Neovim function.
-- This works on all operating systems (Linux, macOS, Windows).
local config_dir = vim.fn.getcwd()

-- Get the optional "testing" flag from the environment
local testing_flag = os.getenv("KORNVIM_TEST_FLAG")
local lazy_root_dir

-- Lazy.nvim plugin manager setup.
if testing_flag then
  lazy_root_dir = config_dir .. "/test/lazy"
else
  lazy_root_dir = vim.fn.stdpath("data") .. "/lazy"
end

local lazypath = lazy_root_dir .. "/lazy.nvim"

if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- Run Lazy.nvim with your plugins loaded from a separate module.
require("lazy").setup(require("packages").setup(), { root = lazy_root_dir })
]]

-- Content for the packages.lua file.
local packages_content = [[
-- lua/packages.lua
-- This file contains the list of all your Neovim plugins.

local M = {}

-- The 'setup' function returns the list of plugins.
function M.setup()
  return {
    -- Lazy.nvim itself.
    "folke/lazy.nvim",

    -- Your custom plugin.
    "%s",

    -- Add more plugins here.
    -- E.g., "nvim-telescope/telescope.nvim"
    -- E.g., { "nvim-lualine/lualine.nvim", config = function() ... end }
  }
end

return M
]]

-- Write the content to init.lua.
local init_file = io.open(config_path .. "init.lua", "w")
if init_file then
  init_file:write(init_content)
  init_file:close()
else
  print("Error: Could not create init.lua file.")
  os.exit(1)
end

-- Write the content to packages.lua.
local packages_file = io.open(lua_path .. "packages.lua", "w")
if packages_file then
  local packages_configuration = string.format(packages_content, init_plugin)
  if dbg_flag then
    print(packages_configuration)
  end
  packages_file:write(packages_configuration)
  packages_file:close()
else
  print("Error: Could not create packages.lua file.")
  os.exit(1)
end

print("Configuration successfully created at: " .. config_path)
