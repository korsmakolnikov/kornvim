-- kornvim.lua
-- Script to initialize a new Neovim configuration.

-- Get the configuration path from a command-line argument.
local config_path = arg[1]
local init_plugin = arg[2] or "korsmakolnikov/kornvim_configurator"
local dbg_flag = os.getenv("KORNVIM_DBG_FLAG") or false

-- If no path is provided, show an error message.
if not config_path then
  print("Error: Configuration path was not specified.")
  print("Usage: lua kornvim.lua /path/to/your/config")
  os.exit(1)
end

-- Ensure the path ends with a directory separator.
config_path = config_path:gsub("/$", "") .. "/"

-- Function to create a directory if it doesn't exist.
local function create_dir(path)
  local file = io.open(path, "r")
  if not file then
    os.execute("mkdir -p " .. path)
  else
    file:close()
  end
end
create_dir(config_path)

-- Content for the init.lua file.
local init_content = [[
-- init.lua
-- Neovim configuration file generated by kornvim.lua

-- Lazy.nvim plugin manager setup.
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- Run Lazy.nvim with your plugins.
require("lazy").setup({
  -- Lazy.nvim itself.
  "folke/lazy.nvim",

  -- Your custom plugin.
  "%s",
})
]]

-- Write the content to init.lua.
local init_file = io.open(config_path .. "init.lua", "w")
if init_file then
  local configuration = string.format(init_content, init_plugin)
  if dbg_flag then
    print(configuration)
  end

  init_file:write(configuration)
  init_file:close()
  print("Configuration successfully created at: " .. config_path)
else
  print("Error: Could not create init.lua file.")
  os.exit(1)
end
